Dear Reviewers:

Thank you very much for reviewing our submission and for your
comments, suggestions, and questions.

  1. To Reviewer 1 expresses concern that the paper is short on results.

     The purpose of the paper is to illustrate the problem that, since
     SBMAs involve an interplay of syntax and semantics, more logical
     machinery is needed to specify SBMAs than ordinary mathematical
     functions.  We believe that this problem is at the core of the
     Calculemus initiative.  We do not claim that we have a solution
     to the problem, but we do claim to have a program for solving the
     problem.  Significant future work will be needed to determine if
     the program is viable.

  2. Reviewer 1 would like us to "spell out the grammar" and to "see
     what the specification would look like in detail".  

     The grammar of CTT_uqe is defined in [7].  We have not fully
     formulated the case study specifications in CTT_uqe; this task is
     listed as future work.  However, we have, as mentioned at the end
     of the Conclusion, fully defined in CTT_qe a symbolic
     differentiation algorithm for polynomials and proved its
     mathematical meaning from its definition.

  3. Reviewer 1 is not certain that RatExpr is definable and says,
     "It seems that would require an inductive data type like in Coq, but
     induction is never mentioned."  

     Both CTT_qe and CTT_uqe contain a built-in inductive type epsilon
     of syntactic values.  This type epsilon is the key to making the
     whole approach work.  In the proof system for CTT_qe, Axiom B6
     states a strong structural induction principle for epsilon.  A
     proof system for CTT_uqe would have an axiom that states a very
     similar induction principle.

     In section 4 of [8], the predicate is-poly is defined in CTT_qe.
     A definition of RatExpr in CTT_uqe would be similar but more
     complicated.

  4. Reviewer 1 suggests a definition of RatFun and wonders if it is
     well-typed:

       lambda f:e. exists R:e. f="lambda x.R" & RatExpr(R)

     This is close, but we need quasiquotation (see section 4.2 in
     [8]) instead of just quotation:

       lambda f:e. exists R:e. f="lambda x_q.|_R_|" & RatExpr(R)

     where |_R_| is the antiquotation of R (,R in Lisp).

  5. Reviewer 2 asks, "Which is then the fourth problem?"

     The four problems are (1) factoring integers, (2) normalizing
     rational expressions, (3) normalizing rational functions, and (3)
     symbolically differentiating functions.

  6. Reviewer 2 asks, "Why would the approach proposed in the paper
     give the most adequate formalization?"

     We are claiming that the formalization is adequate.  We are not
     claiming that it is the most adequate and, at this time, it would
     be premature to do so.

  7. Reviewer 2 asks, "What can be automated in the process?"

     We expect that a great deal can be automated.  While HOL Light QE
     implements CTT_qe, the automation needed to smoothly specify,
     define, apply, and reasoning about SBMAs in HOL Light QE remains
     to be developed.

  8. Reviewer 2 asks, "Does every SBMA require a new formalization?"  

     Every algorithm needs it own specification, but not every
     specification needs a separate formalization.  Formalizations can
     share components just like programs can share components.

  9. Reviewer 2 asks, "How would the current approach compare to other
     works formalizing math, for example in Isabelle?"

     Assuming math means SBMAs, our approach uses global reflection,
     while most other approaches use local reflection as explained in
     section 2.2, but there has been some in the direction of global
     reflection (see 12 below).

 10. Reviewer 2 wants to know what it means for SBMAs to manipulate
     mathematical structures in "mathematically meaningful ways".

     The meaning here is that SBMAs, in addition to a computational
     behavior, have a mathematical meaning which is defined in the
     Introduction. PL people would say well-defined denotational
     semantics to mean the same as "mathematically meaningful".

 11. Reviewer 3 asks, "Is [the logic of HOL Light QE] provably
     conservative over HOL?"

     Lemma 8.1.1(1) in [8] shows that CTT_qe is conservative over
     Church's type theory.  Since HOL is Church's type theory plus
     type variables, an analogous lemma shows that the HOL Light QE
     logic (which is CTT_qe plus type variables) is conservative over
     HOL.

 12. Reviewer 3 asks, "How does [similar features in Agda, Coq, and
     Lean] relate to the present work?"

     The main work in Agda, Coq, Lean, and other systems involves
     local reflection; extensive references can be found in [8].
     There has been some work work moving towards global reflection.
     We will add an sentence in section 2.2 referencing this work.

Sincerely,

Jacques Carette
Bill Farmer
